Create React App :

Site : https://github.com/facebook/create-react-app 

facebook/create-react-app (github)

============================================================

* npx: 
  ====
https://medium.com/@maybekatz/introducing-npx-an-npm-package-runner-55f7d4bd282b
  
  npx is a tool intended to help round out the experience of using packages from the npm registryâ€”the same way npm makes it super easy to install and manage dependencies hosted on the registry, npx makes it easy to use CLI tools and other executables hosted on the registry. It greatly simplifies a number of things that, until now, required a bit of ceremony to do with plain npm:
  
==================================================================

create-react-app:

 > npm install create-react-app -g
 
 D:\viswa\ReactApp>npm install create-react-app -g
C:\Users\kasi.viswanath\AppData\Roaming\npm\create-react-app -> C:\Users\kasi.viswanath\AppData\Roaming\npm\node_modules\create-react-app\index.js
+ create-react-app@2.1.2
added 63 packages in 8.639s

 > create-react-app react-compleate-guide
 > cd react-compleate-guide
 > npm start
 > localhost:3000
 
 ============================================================================
 
 package.json :
 
 All the dependencies are configured in this file
 
 node modules :
 
 Holds all modules and dependencies 
 
 > npm install 
 
 Public : Root folder
 
    public/index.html --> Single page to display ( this only singe page application to display)
	
	index.html :
	
	<div id="root"></div> 

Above will mount all the react application

manifest.json:

This file is meta data of our application

src:

This folder is actually our application to work and chages.

 src/index.js:

ReactDOM.render(<App />, document.getElementById('root'));

* access to our root element to DOM in our html file.

* It renders of our react application with render() method

 src/App.js

is App component of js file 

src/App.css

is App global styles

src/index.css

is also general styles to our html body like ...

src/serviceWorker.js 

Registering our service, We don't need to configure there.

src/App.test.js 

is test file to our application testing, It allows us to write unit tests.

================================================================================

 * src/insex.js:

ReactDOM.render(<h1>Test</h1>, document.getElementById('root'));

We can render normal html pages also. 

// If you want your app to work offline and load faster, you can change
// unregister() to register() below. Note this comes with some pitfalls.
// Learn more about service workers: http://bit.ly/CRA-PWA
serviceWorker.unregister();

src/App.js:

  render() {
    return (
      <div className="App">
        <h1>Hi, I'm a React App</h1>
      </div>
    );
  }
  
  Above is not a Html code. It is a JSX code.
  
 ======================================================================
 
 * we write java script code like 
 
 render() {
    // return (
    //   <div className="App">
    //     <h1>Hi, I'm a React App</h1>
    //   </div>
    // );
    return React.createElement('div',null,React.createElement('h1',null,'Does this work now?'));
  }
  
  ==================================================================================
   return React.createElement('div',{className:'App'},React.createElement('h1',null,'Does this work now?'));
   ====================================================================================
   
   class App extends Component {
  render() {
     return (
       <div className="App">
       <h1>Hi, I'm a React App</h1>
       </div>
     );
   // return React.createElement('div',{className:'App'},React.createElement('h1',null,'Does this work now?'));
  }
}

in the aboe div we are using className we can't use class why because class App is already defined.

=========================================================================

Out putting Dynamic Content :

Person.js:

import React from 'react';

const person = () => {
    return <p>I'm a Person and I am {Math.floor(Math.random() * 30 )} years old ! </p>
} ;

export default person;

* We use {} single curly braces for dispaly dynamic content on webpages.

To Access component out side properties we use props.childeren  ( props is any name)

ex :

 Person.js :
 
 import React from 'react';

const person = (props) => {

    return(
      
        <div>

<p>I'm a {props.name} and I am {props.age} years old ! </p>
<p>{props.children}</p>
        </div>


    )
   
} ;

export default person;

App.js :
========

import React, { Component } from 'react';
import './App.css';
import Person from './Person/Person';

class App extends Component {
  render() {
     return (
       <div className="App">
       <h1>Hi, I'm a React App</h1>
       <Person name="Max" age="28"/>
       <Person name="Manu" age="29">My Hobbies : Racing  </Person>
       <Person name="Stephenie" age="26"/>
       </div>
     );
   // return React.createElement('div',{className:'App'},React.createElement('h1',null,'Does this work now?'));
  }
}

export default App;


===========================================================================

Props and state :
==================

Props : props are set and pass from outside componet.
state : state manages a inside a component.state only available into that component.
==========================================================================================

state change Examples :

App.js
======

import React, { Component } from 'react';
import './App.css';
import Person from './Person/Person';

class App extends Component {
  state = {
    persons:[{
      name:'Max' , age:28},
      {
        name:'Manu' , age:29},
        {
          name:'Stephanie' , age:26}
    ],
    otherState:'some other value'
    
  }

  switchNameHandler = () => {

    //console.log('Was Clicked !')
    // Dont do this : this.state.persons[0].name='Maximilan';
    this.setState({
      persons:[
        {name:'Maximilan' , age:28},
        {name:'Manu' , age:29},
        {name:'Stephanie' , age:27}
      ]
    })
  }
       

  render() {
     return (
       <div className="App">
       <h1>Hi, I'm a React App</h1>
       <p>This is realy working!</p>
       <button onClick={this.switchNameHandler}>Switch Name</button>
       <Person name={this.state.persons[0].name} age={this.state.persons[0].age}/>
       <Person name={this.state.persons[1].name} age={this.state.persons[1].age}>My Hobbies : Racing  </Person>
       <Person name={this.state.persons[2].name} age={this.state.persons[2].age}/>
       </div>
     );
   // return React.createElement('div',{className:'App'},React.createElement('h1',null,'Does this work now?'));
  }
}

export default App;


* Above button click to changes the values this is done by using setState()

====================================================================================

Styling React components : (60)
=============================

* TO install Radium (64):
========================

 npm install  --save radium

 radium is popular inline styles for react for sudo selectors and media queries.
 
 (65) --> code
 
 (67):
 =====
 
 To commit changes and To eject the configuration
 
 npm run eject
 
 * webpack is build bundling tool applies all tranformations and optimisations of our files and bundles them together and css take cares.

To add css module add the changes in webpack.config.dev.js  and webpack.config.prod.js:

 options: {
                  importLoaders: 1,
                  modules: true,
                  localIdentName: '[name]__[local]__[hash:base64:5]'
                }, 
 
 
 prod:
 
   options: {
                        importLoaders: 1,
                        modules: true,
                        localIdentName: '[name]__[local]__[hash:base64:5]',
                        minimize: true,
                        sourceMap: shouldUseSourceMap,
                      },
 
 ==============================================================================
 
 Debugging React Apps : (72) :
 ============================
 
 (74) -- > Dev Tools and Sourcemaps
 
 (75) --> React Developer tools
 
 how to use them :
 
 https://github.com/facebook/react-devtools
 
 To add Extention to chrome :
 
 https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en
 
 Error Boundaries (76):
 
 through Errors :
 
    if(rnd > 0.7 ){
        throw new Error('Something went wrong');
        
    }
	
=========================================================================================

ErrorBoundary	


multi line comments in VSCode : Alt + Shift + A

(82) : Stateless and Stateful Components :
==========================================

Stateful(Containers) :

 * class XY extends Component 
 * (Yes) Access to State
 * (Yes) Lifecycle Hooks
 * Access State and Props via "this"
    this.state.XY & this.props.XY
 * Use only if you need to manage State or access to Lifecycle Hooks!	

	

Stateless :

 * const XY = (props) => { ...}
 * (NO) Access to State
 * (NO) Lifecycle Hooks
 * Access Props via "props"
     props.XY 
 * use in all other cases

=======================================================================================

 (83) : Component Lifecycle :
==============================

only available in Stateful Components!
=======================================

  * constructor()
  * componentWillMount()
  * componentWillReceiveProps()
  * shouldComponentUpdate()
  * componetWillUpdate()
  * ComponetDidUpdate()
  * componetDidCatch()
  * componetDidMount()
  * componentWillUnmount()
  * render()
   
 ==========================================================================================  
   constructor() componentWillMount() componetDidMount() render()
  
Only these methods is executed at the time component creation 
===========================================================================================  
 
 (94): hoc : 
 ============
 
 Higher Order Components
 
 Aux.js
 
 const aux = (props) => props.children;

export default aux;

Holds childeren values it acts like parent like <div> 

<Aux>
            <h1>{props.appTitle}</h1>
            <p className={assignedClasses.join( ' ' )}>This is really working!</p>
            <button
                className={btnClass}
                onClick={props.clicked}>Toggle Persons</button>
        </Aux>
		
=================================================================================

Session : 12 : 211 : Adding Routing to our Burger Project :
=============================================================

Aux File is 93 lesson 

Aux.js


const aux = (props) => props.children;

export default aux;

=====================================================================================


Fire base : 170 :

recorichard.reatardo@gmail.com

=================================================================================

216 : Passing Ingredents via Query Params :
===========================================

BurgerBuilder.js :
==================

 purchaseContinueHandler = () => {
        // alert('You continue!');
        
        const queryParams = [];
        for (let i in this.state.ingredients) {
            queryParams.push(encodeURIComponent(i) + '=' + encodeURIComponent(this.state.ingredients[i]));
        }
        queryParams.push('price=' + this.state.totalPrice);
        const queryString = queryParams.join('&');
        this.props.history.push({
            pathname: '/checkout',
            search: '?' + queryString
        });
    }
	
	
* Pass values through query params and get that values from query use that values Checkout.js



componentWillMount () {
        const query = new URLSearchParams( this.props.location.search );
        const ingredients = {};
        let price = 0;
        for ( let param of query.entries() ) {
            // ['salad', '1']
            if (param[0] === 'price') {
                price = param[1];
            } else {
                ingredients[param[0]] = +param[1];
            }
        }
        this.setState( { ingredients: ingredients, totalPrice: price } );
    }

===========================================================================================
222: Outputting the Orders :

<div className={classes.Order}>
            <p>Ingredients: {ingredientOutput}</p>
            <p>Price: <strong>USD {Number.parseFloat( props.price ).toFixed( 2 )}</strong></p>
        </div>
* toFixed() is used to fix to get to decimal values of value.

=======================================================================================		
		
	
 
 
 
 
 
 
 
 

   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
  
	
	
	
	
	
	
	
	
	
	
	
	
	
	